{"project": "aeon", "project_url": "https://www.aeon-toolkit.org", "show_commit_url": "https://github.com/aeon-toolkit/aeon/commit", "hash_length": 8, "revision_to_hash": {"3332": "4dd1b3bce0183497b7365dd95945736959fc5d66", "3437": "5178d35743b09725c949065065fd7eba50921354", "3477": "ee7fad13ce8901d5e949d3e266764af7d239dea9", "3546": "fe6cd12434b3d3ce16f31db3e870f5c15ebe60a9", "3582": "4248080f942f031e34768b29b10a2f6552b1a8be", "3666": "902ee0098e2cac9bbca8bef3b9a72a0172e76ba3", "3769": "c0139b2d39b10613bf2d73428e1eb7b6f2619c16", "3881": "8fe7cf353858f1b520b3d021d3795394abdd1a3b", "3987": "e68231e13254ba0393472088800ae2c4a0949e4b", "4047": "4a58c4dba5bb37e43979368ad9cf092540e71786", "4140": "5f8974f3fca240f66cb52a626658931489871962", "4187": "317f2a6917262b9fd542c16fa3df30caf80b5e34", "4253": "708db2e76914d78c1d36044d73b47ad23941996a", "4372": "0ab30bffd1cbc541daa54390635937f135bf8bcb", "4488": "75e8ef5aa4788655302c40d1c7286f3c95c85311", "4502": "c313c4b1a8272215c459f9ee485c4fbeccdc6c64", "4912": "225c2b655285391b9bbd5b86ea8e42f31048e11e", "5426": "0fed29f21908cfad2981ea645f51aaf018f0fe89", "5793": "d8dc31f46ece4101e0cf97a427d79a73477d0a42", "6262": "c40901318418f924733652714904f75e7eb7cc75", "6268": "45b9b86f0d9aa5222492f90e3ded7864608f1106", "6269": "18ef53a7f88393d9a00df40f8bf3072da996e283", "6270": "2b253ef00e362741eed904c62e01ac31deba64d9"}, "revision_to_date": {"3332": 1675065232000, "3437": 1679128783000, "3477": 1681470187000, "3546": 1683906709000, "3582": 1686394101000, "3666": 1690628503000, "3769": 1696509485000, "3881": 1702387424000, "3987": 1707476023000, "4047": 1709577665000, "4140": 1712311728000, "4187": 1714038782000, "4253": 1717169553000, "4372": 1720690123000, "4488": 1724240043000, "4502": 1725711272000, "4912": 1732787094000, "5426": 1744556782000, "5793": 1750673856000, "6262": 1755009008000, "6268": 1755013783000, "6269": 1755013821000, "6270": 1755013982000}, "params": {"arch": ["arm64"], "cpu": ["Apple M4 Max"], "machine": ["Chriss-MBP-2"], "num_cpu": ["14"], "os": ["Darwin 24.3.0"], "ram": ["38654705664"], "python": ["3.12"], "numpy": [""], "pytest": [""], "numba": [""], "branch": ["HEAD"]}, "graph_param_list": [{"arch": "arm64", "cpu": "Apple M4 Max", "machine": "Chriss-MBP-2", "num_cpu": "14", "os": "Darwin 24.3.0", "ram": "38654705664", "python": "3.12", "numpy": "", "pytest": "", "numba": "", "branch": "HEAD"}], "benchmarks": {"distances.DTW.time_alignment_path": {"code": "class _ElasticDistanceBenchmark:\n    def time_alignment_path(self, shape):\n        self.alignment_func(self.a[0], self.b[0])\n\n    def setup(self, shape):\n        temp = make_example_3d_numpy(5, 1, 10, random_state=42, return_y=False)\n        for _ in range(3):\n            self.alignment_func(temp[0], temp[0])\n    \n        super().setup(shape)", "min_run_count": 2, "name": "distances.DTW.time_alignment_path", "number": 0, "param_names": ["shape"], "params": [["(10, 1, 10)", "(100, 1, 100)", "(100, 1, 500)", "(10, 3, 10)", "(100, 3, 100)", "(100, 3, 500)"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "178645425bbf1ec77fe5104beba0ae78ba398eb9fd1ce0ac06cfd22d18f657e3", "warmup_time": -1}, "distances.DTW.time_indv_dist": {"code": "class _DistanceBenchmark:\n    def time_indv_dist(self, shape):\n        # single-series distance\n        self.distance_func(self.a[0], self.b[0])\n\nclass _ElasticDistanceBenchmark:\n    def setup(self, shape):\n        temp = make_example_3d_numpy(5, 1, 10, random_state=42, return_y=False)\n        for _ in range(3):\n            self.alignment_func(temp[0], temp[0])\n    \n        super().setup(shape)", "min_run_count": 2, "name": "distances.DTW.time_indv_dist", "number": 0, "param_names": ["shape"], "params": [["(10, 1, 10)", "(100, 1, 100)", "(100, 1, 500)", "(10, 3, 10)", "(100, 3, 100)", "(100, 3, 500)"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "398d2e77af93b48515e22a4a588de094d01aae62ed30c94c4dcc178cd4a36262", "warmup_time": -1}, "distances.DTW.time_multiple_to_multiple_dist": {"code": "class _DistanceBenchmark:\n    def time_multiple_to_multiple_dist(self, shape):\n        self.pairwise_func(self.a, self.b)\n\nclass _ElasticDistanceBenchmark:\n    def setup(self, shape):\n        temp = make_example_3d_numpy(5, 1, 10, random_state=42, return_y=False)\n        for _ in range(3):\n            self.alignment_func(temp[0], temp[0])\n    \n        super().setup(shape)", "min_run_count": 2, "name": "distances.DTW.time_multiple_to_multiple_dist", "number": 0, "param_names": ["shape"], "params": [["(10, 1, 10)", "(100, 1, 100)", "(100, 1, 500)", "(10, 3, 10)", "(100, 3, 100)", "(100, 3, 500)"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "b86aff13911aeb7db25f818326592368223c6998e087a49f53aa8b5e89a65de4", "warmup_time": -1}, "distances.DTW.time_one_to_multiple_dist": {"code": "class _DistanceBenchmark:\n    def time_one_to_multiple_dist(self, shape):\n        self.pairwise_func(self.a[0], self.b)\n\nclass _ElasticDistanceBenchmark:\n    def setup(self, shape):\n        temp = make_example_3d_numpy(5, 1, 10, random_state=42, return_y=False)\n        for _ in range(3):\n            self.alignment_func(temp[0], temp[0])\n    \n        super().setup(shape)", "min_run_count": 2, "name": "distances.DTW.time_one_to_multiple_dist", "number": 0, "param_names": ["shape"], "params": [["(10, 1, 10)", "(100, 1, 100)", "(100, 1, 500)", "(10, 3, 10)", "(100, 3, 100)", "(100, 3, 500)"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "e3b644fa86e42c088e14cf5b31c2b42ef9bb2935b1e442102bad283d55162659", "warmup_time": -1}, "distances.DTW.time_pairwise_dist": {"code": "class _DistanceBenchmark:\n    def time_pairwise_dist(self, shape):\n        # pairwise(X) or pairwise(X, Y)\n        self.pairwise_func(self.a)\n\nclass _ElasticDistanceBenchmark:\n    def setup(self, shape):\n        temp = make_example_3d_numpy(5, 1, 10, random_state=42, return_y=False)\n        for _ in range(3):\n            self.alignment_func(temp[0], temp[0])\n    \n        super().setup(shape)", "min_run_count": 2, "name": "distances.DTW.time_pairwise_dist", "number": 0, "param_names": ["shape"], "params": [["(10, 1, 10)", "(100, 1, 100)", "(100, 1, 500)", "(10, 3, 10)", "(100, 3, 100)", "(100, 3, 500)"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "64352b3e8cb218c8be541623140ba754d28d2a8362adf13717c1a427fecbd246", "warmup_time": -1}, "distances.Euclidean.time_indv_dist": {"code": "class _DistanceBenchmark:\n    def time_indv_dist(self, shape):\n        # single-series distance\n        self.distance_func(self.a[0], self.b[0])\n\n    def setup(self, shape):\n        # Two independent samples so we don't measure duplicates\n        self.a = make_example_3d_numpy(*shape, return_y=False, random_state=1)\n        self.b = make_example_3d_numpy(*shape, return_y=False, random_state=2)\n    \n        # Warm up\n        temp = make_example_3d_numpy(5, 1, 10, random_state=42, return_y=False)\n        for _ in range(3):\n            self.distance_func(temp[0], temp[0])\n            self.pairwise_func(temp)", "min_run_count": 2, "name": "distances.Euclidean.time_indv_dist", "number": 0, "param_names": ["shape"], "params": [["(10, 1, 10)", "(100, 1, 100)", "(100, 1, 500)", "(10, 3, 10)", "(100, 3, 100)", "(100, 3, 500)"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "06a5aeff9687c7b7cd290b5777a9c838a79aef577312267554b435b327436963", "warmup_time": -1}, "distances.Euclidean.time_multiple_to_multiple_dist": {"code": "class _DistanceBenchmark:\n    def time_multiple_to_multiple_dist(self, shape):\n        self.pairwise_func(self.a, self.b)\n\n    def setup(self, shape):\n        # Two independent samples so we don't measure duplicates\n        self.a = make_example_3d_numpy(*shape, return_y=False, random_state=1)\n        self.b = make_example_3d_numpy(*shape, return_y=False, random_state=2)\n    \n        # Warm up\n        temp = make_example_3d_numpy(5, 1, 10, random_state=42, return_y=False)\n        for _ in range(3):\n            self.distance_func(temp[0], temp[0])\n            self.pairwise_func(temp)", "min_run_count": 2, "name": "distances.Euclidean.time_multiple_to_multiple_dist", "number": 0, "param_names": ["shape"], "params": [["(10, 1, 10)", "(100, 1, 100)", "(100, 1, 500)", "(10, 3, 10)", "(100, 3, 100)", "(100, 3, 500)"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "f2e441191ad9fbc22098a2266e641ab8782ffbfe6af58fd43f1b89a62b1f2bb6", "warmup_time": -1}, "distances.Euclidean.time_one_to_multiple_dist": {"code": "class _DistanceBenchmark:\n    def time_one_to_multiple_dist(self, shape):\n        self.pairwise_func(self.a[0], self.b)\n\n    def setup(self, shape):\n        # Two independent samples so we don't measure duplicates\n        self.a = make_example_3d_numpy(*shape, return_y=False, random_state=1)\n        self.b = make_example_3d_numpy(*shape, return_y=False, random_state=2)\n    \n        # Warm up\n        temp = make_example_3d_numpy(5, 1, 10, random_state=42, return_y=False)\n        for _ in range(3):\n            self.distance_func(temp[0], temp[0])\n            self.pairwise_func(temp)", "min_run_count": 2, "name": "distances.Euclidean.time_one_to_multiple_dist", "number": 0, "param_names": ["shape"], "params": [["(10, 1, 10)", "(100, 1, 100)", "(100, 1, 500)", "(10, 3, 10)", "(100, 3, 100)", "(100, 3, 500)"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "dc7ba3a955b2a566c3ca514acf02a841e8c6c41a14d97ea6175f309b5ae2c82a", "warmup_time": -1}, "distances.Euclidean.time_pairwise_dist": {"code": "class _DistanceBenchmark:\n    def time_pairwise_dist(self, shape):\n        # pairwise(X) or pairwise(X, Y)\n        self.pairwise_func(self.a)\n\n    def setup(self, shape):\n        # Two independent samples so we don't measure duplicates\n        self.a = make_example_3d_numpy(*shape, return_y=False, random_state=1)\n        self.b = make_example_3d_numpy(*shape, return_y=False, random_state=2)\n    \n        # Warm up\n        temp = make_example_3d_numpy(5, 1, 10, random_state=42, return_y=False)\n        for _ in range(3):\n            self.distance_func(temp[0], temp[0])\n            self.pairwise_func(temp)", "min_run_count": 2, "name": "distances.Euclidean.time_pairwise_dist", "number": 0, "param_names": ["shape"], "params": [["(10, 1, 10)", "(100, 1, 100)", "(100, 1, 500)", "(10, 3, 10)", "(100, 3, 100)", "(100, 3, 500)"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "62583bfe82750277e63e39638cac24f7106a0bf7d8997ca936729ff6210483ff", "warmup_time": -1}, "distances.MSM.time_alignment_path": {"code": "class _ElasticDistanceBenchmark:\n    def time_alignment_path(self, shape):\n        self.alignment_func(self.a[0], self.b[0])\n\n    def setup(self, shape):\n        temp = make_example_3d_numpy(5, 1, 10, random_state=42, return_y=False)\n        for _ in range(3):\n            self.alignment_func(temp[0], temp[0])\n    \n        super().setup(shape)", "min_run_count": 2, "name": "distances.MSM.time_alignment_path", "number": 0, "param_names": ["shape"], "params": [["(10, 1, 10)", "(100, 1, 100)", "(100, 1, 500)", "(10, 3, 10)", "(100, 3, 100)", "(100, 3, 500)"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "178645425bbf1ec77fe5104beba0ae78ba398eb9fd1ce0ac06cfd22d18f657e3", "warmup_time": -1}, "distances.MSM.time_indv_dist": {"code": "class _DistanceBenchmark:\n    def time_indv_dist(self, shape):\n        # single-series distance\n        self.distance_func(self.a[0], self.b[0])\n\nclass _ElasticDistanceBenchmark:\n    def setup(self, shape):\n        temp = make_example_3d_numpy(5, 1, 10, random_state=42, return_y=False)\n        for _ in range(3):\n            self.alignment_func(temp[0], temp[0])\n    \n        super().setup(shape)", "min_run_count": 2, "name": "distances.MSM.time_indv_dist", "number": 0, "param_names": ["shape"], "params": [["(10, 1, 10)", "(100, 1, 100)", "(100, 1, 500)", "(10, 3, 10)", "(100, 3, 100)", "(100, 3, 500)"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "398d2e77af93b48515e22a4a588de094d01aae62ed30c94c4dcc178cd4a36262", "warmup_time": -1}, "distances.MSM.time_multiple_to_multiple_dist": {"code": "class _DistanceBenchmark:\n    def time_multiple_to_multiple_dist(self, shape):\n        self.pairwise_func(self.a, self.b)\n\nclass _ElasticDistanceBenchmark:\n    def setup(self, shape):\n        temp = make_example_3d_numpy(5, 1, 10, random_state=42, return_y=False)\n        for _ in range(3):\n            self.alignment_func(temp[0], temp[0])\n    \n        super().setup(shape)", "min_run_count": 2, "name": "distances.MSM.time_multiple_to_multiple_dist", "number": 0, "param_names": ["shape"], "params": [["(10, 1, 10)", "(100, 1, 100)", "(100, 1, 500)", "(10, 3, 10)", "(100, 3, 100)", "(100, 3, 500)"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "b86aff13911aeb7db25f818326592368223c6998e087a49f53aa8b5e89a65de4", "warmup_time": -1}, "distances.MSM.time_one_to_multiple_dist": {"code": "class _DistanceBenchmark:\n    def time_one_to_multiple_dist(self, shape):\n        self.pairwise_func(self.a[0], self.b)\n\nclass _ElasticDistanceBenchmark:\n    def setup(self, shape):\n        temp = make_example_3d_numpy(5, 1, 10, random_state=42, return_y=False)\n        for _ in range(3):\n            self.alignment_func(temp[0], temp[0])\n    \n        super().setup(shape)", "min_run_count": 2, "name": "distances.MSM.time_one_to_multiple_dist", "number": 0, "param_names": ["shape"], "params": [["(10, 1, 10)", "(100, 1, 100)", "(100, 1, 500)", "(10, 3, 10)", "(100, 3, 100)", "(100, 3, 500)"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "e3b644fa86e42c088e14cf5b31c2b42ef9bb2935b1e442102bad283d55162659", "warmup_time": -1}, "distances.MSM.time_pairwise_dist": {"code": "class _DistanceBenchmark:\n    def time_pairwise_dist(self, shape):\n        # pairwise(X) or pairwise(X, Y)\n        self.pairwise_func(self.a)\n\nclass _ElasticDistanceBenchmark:\n    def setup(self, shape):\n        temp = make_example_3d_numpy(5, 1, 10, random_state=42, return_y=False)\n        for _ in range(3):\n            self.alignment_func(temp[0], temp[0])\n    \n        super().setup(shape)", "min_run_count": 2, "name": "distances.MSM.time_pairwise_dist", "number": 0, "param_names": ["shape"], "params": [["(10, 1, 10)", "(100, 1, 100)", "(100, 1, 500)", "(10, 3, 10)", "(100, 3, 100)", "(100, 3, 500)"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "64352b3e8cb218c8be541623140ba754d28d2a8362adf13717c1a427fecbd246", "warmup_time": -1}, "distances.TWE.time_alignment_path": {"code": "class _ElasticDistanceBenchmark:\n    def time_alignment_path(self, shape):\n        self.alignment_func(self.a[0], self.b[0])\n\n    def setup(self, shape):\n        temp = make_example_3d_numpy(5, 1, 10, random_state=42, return_y=False)\n        for _ in range(3):\n            self.alignment_func(temp[0], temp[0])\n    \n        super().setup(shape)", "min_run_count": 2, "name": "distances.TWE.time_alignment_path", "number": 0, "param_names": ["shape"], "params": [["(10, 1, 10)", "(100, 1, 100)", "(100, 1, 500)", "(10, 3, 10)", "(100, 3, 100)", "(100, 3, 500)"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "178645425bbf1ec77fe5104beba0ae78ba398eb9fd1ce0ac06cfd22d18f657e3", "warmup_time": -1}, "distances.TWE.time_indv_dist": {"code": "class _DistanceBenchmark:\n    def time_indv_dist(self, shape):\n        # single-series distance\n        self.distance_func(self.a[0], self.b[0])\n\nclass _ElasticDistanceBenchmark:\n    def setup(self, shape):\n        temp = make_example_3d_numpy(5, 1, 10, random_state=42, return_y=False)\n        for _ in range(3):\n            self.alignment_func(temp[0], temp[0])\n    \n        super().setup(shape)", "min_run_count": 2, "name": "distances.TWE.time_indv_dist", "number": 0, "param_names": ["shape"], "params": [["(10, 1, 10)", "(100, 1, 100)", "(100, 1, 500)", "(10, 3, 10)", "(100, 3, 100)", "(100, 3, 500)"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "398d2e77af93b48515e22a4a588de094d01aae62ed30c94c4dcc178cd4a36262", "warmup_time": -1}, "distances.TWE.time_multiple_to_multiple_dist": {"code": "class _DistanceBenchmark:\n    def time_multiple_to_multiple_dist(self, shape):\n        self.pairwise_func(self.a, self.b)\n\nclass _ElasticDistanceBenchmark:\n    def setup(self, shape):\n        temp = make_example_3d_numpy(5, 1, 10, random_state=42, return_y=False)\n        for _ in range(3):\n            self.alignment_func(temp[0], temp[0])\n    \n        super().setup(shape)", "min_run_count": 2, "name": "distances.TWE.time_multiple_to_multiple_dist", "number": 0, "param_names": ["shape"], "params": [["(10, 1, 10)", "(100, 1, 100)", "(100, 1, 500)", "(10, 3, 10)", "(100, 3, 100)", "(100, 3, 500)"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "b86aff13911aeb7db25f818326592368223c6998e087a49f53aa8b5e89a65de4", "warmup_time": -1}, "distances.TWE.time_one_to_multiple_dist": {"code": "class _DistanceBenchmark:\n    def time_one_to_multiple_dist(self, shape):\n        self.pairwise_func(self.a[0], self.b)\n\nclass _ElasticDistanceBenchmark:\n    def setup(self, shape):\n        temp = make_example_3d_numpy(5, 1, 10, random_state=42, return_y=False)\n        for _ in range(3):\n            self.alignment_func(temp[0], temp[0])\n    \n        super().setup(shape)", "min_run_count": 2, "name": "distances.TWE.time_one_to_multiple_dist", "number": 0, "param_names": ["shape"], "params": [["(10, 1, 10)", "(100, 1, 100)", "(100, 1, 500)", "(10, 3, 10)", "(100, 3, 100)", "(100, 3, 500)"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "e3b644fa86e42c088e14cf5b31c2b42ef9bb2935b1e442102bad283d55162659", "warmup_time": -1}, "distances.TWE.time_pairwise_dist": {"code": "class _DistanceBenchmark:\n    def time_pairwise_dist(self, shape):\n        # pairwise(X) or pairwise(X, Y)\n        self.pairwise_func(self.a)\n\nclass _ElasticDistanceBenchmark:\n    def setup(self, shape):\n        temp = make_example_3d_numpy(5, 1, 10, random_state=42, return_y=False)\n        for _ in range(3):\n            self.alignment_func(temp[0], temp[0])\n    \n        super().setup(shape)", "min_run_count": 2, "name": "distances.TWE.time_pairwise_dist", "number": 0, "param_names": ["shape"], "params": [["(10, 1, 10)", "(100, 1, 100)", "(100, 1, 500)", "(10, 3, 10)", "(100, 3, 100)", "(100, 3, 500)"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "64352b3e8cb218c8be541623140ba754d28d2a8362adf13717c1a427fecbd246", "warmup_time": -1}}, "machines": {"Chriss-MBP-2": {"arch": "arm64", "cpu": "Apple M4 Max", "machine": "Chriss-MBP-2", "num_cpu": "14", "os": "Darwin 24.3.0", "ram": "38654705664", "version": 1}}, "tags": {"sktime-v0.16.0": 3332, "v0.1.0": 3477, "v0.1.0rc0": 3437, "v0.10.0": 4372, "v0.11.0": 4488, "v0.11.1": 4502, "v0.2.0": 3546, "v0.3.0": 3582, "v0.4.0": 3666, "v0.5.0": 3769, "v0.6.0": 3881, "v0.7.0": 3987, "v0.7.1": 4047, "v0.8.0": 4140, "v0.8.1": 4187, "v0.9.0": 4253, "v1.0.0": 4912, "v1.1.0": 5426, "v1.2.0": 5793}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}
