"""Test for the DensityPeakClusterer module."""

import numpy as np
import pytest

from aeon.clustering.density_based._density_peak import DensityPeakClusterer

# spiral
DATA_STR = """
31.95   7.95    3
31.15   7.3     3
30.45   6.65    3
29.7    6.0     3
28.9    5.55    3
28.05   5.0     3
27.2    4.55    3
26.35   4.15    3
25.4    3.85    3
24.6    3.6     3
23.6    3.3     3
22.75   3.15    3
21.85   3.05    3
20.9    3.0     3
20.0    2.9     3
19.1    3.0     3
18.2    3.2     3
17.3    3.25    3
16.55   3.5     3
15.7    3.7     3
14.85   4.1     3
14.15   4.4     3
13.4    4.75    3
12.7    5.2     3
12.05   5.65    3
11.45   6.15    3
10.9    6.65    3
10.3    7.25    3
9.7     7.85    3
9.35    8.35    3
8.9     9.05    3
8.55    9.65    3
8.15    10.35   3
7.95    10.95   3
7.75    11.7    3
7.55    12.35   3
7.45    13.0    3
7.35    13.75   3
7.3     14.35   3
7.35    14.95   3
7.35    15.75   3
7.55    16.35   3
7.7     16.95   3
7.8     17.55   3
8.05    18.15   3
8.3     18.75   3
8.65    19.3    3
8.9     19.85   3
9.3     20.3    3
9.65    20.8    3
10.2    21.25   3
10.6    21.65   3
11.1    22.15   3
11.55   22.45   3
11.95   22.7    3
12.55   23.0    3
13.05   23.2    3
13.45   23.4    3
14.0    23.55   3
14.55   23.6    3
15.1    23.75   3
15.7    23.75   3
16.15   23.85   3
16.7    23.8    3
17.15   23.75   3
17.75   23.75   3
18.2    23.6    3
18.65   23.5    3
19.1    23.35   3
19.6    23.15   3
20.0    22.95   3
20.4    22.7    3
20.7    22.55   3
21.0    22.15   3
21.45   21.95   3
21.75   21.55   3
22.0    21.25   3
22.25   21.0    3
22.5    20.7    3
22.65   20.35   3
22.75   20.05   3
22.9    19.65   3
23.0    19.35   3
23.1    19.0    3
23.15   18.65   3
23.2    18.25   3
23.2    18.05   3
23.2    17.8    3
23.1    17.45   3
23.05   17.15   3
22.9    16.9    3
22.85   16.6    3
22.7    16.4    3
22.6    16.2    3
22.55   16.05   3
22.4    15.95   3
22.35   15.8    3
22.2    15.65   3
22.15   15.55   3
22.0    15.4    3
21.9    15.3    3
21.85   15.25   3
21.75   15.15   3
21.65   15.05   3
21.55   15.0    3
21.5    14.9    3
19.35   31.65   1
20.35   31.45   1
21.35   31.1    1
22.25   30.9    1
23.2    30.45   1
23.95   30.05   1
24.9    29.65   1
25.6    29.05   1
26.35   28.5    1
27.15   27.9    1
27.75   27.35   1
28.3    26.6    1
28.95   25.85   1
29.5    25.15   1
29.95   24.45   1
30.4    23.7    1
30.6    22.9    1
30.9    22.1    1
31.25   21.3    1
31.35   20.55   1
31.5    19.7    1
31.55   18.9    1
31.65   18.15   1
31.6    17.35   1
31.45   16.55   1
31.3    15.8    1
31.15   15.05   1
30.9    14.35   1
30.6    13.65   1
30.3    13.0    1
29.9    12.3    1
29.5    11.75   1
29.0    11.15   1
28.5    10.6    1
28.0    10.1    1
27.55   9.65    1
26.9    9.1     1
26.25   8.8     1
25.7    8.4     1
25.15   8.05    1
24.5    7.75    1
23.9    7.65    1
23.15   7.4     1
22.5    7.3     1
21.9    7.1     1
21.25   7.05    1
20.5    7.0     1
19.9    6.95    1
19.25   7.05    1
18.75   7.1     1
18.05   7.25    1
17.5    7.35    1
16.9    7.6     1
16.35   7.8     1
15.8    8.05    1
15.4    8.35    1
14.9    8.7     1
14.45   8.9     1
13.95   9.3     1
13.6    9.65    1
13.25   10.1    1
12.95   10.55   1
12.65   10.9    1
12.35   11.4    1
12.2    11.75   1
11.95   12.2    1
11.8    12.65   1
11.75   13.05   1
11.55   13.6    1
11.55   14.0    1
11.55   14.35   1
11.55   14.7    1
11.6    15.25   1
11.65   15.7    1
11.8    16.05   1
11.85   16.5    1
12.0    16.75   1
12.15   17.2    1
12.3    17.6    1
12.55   17.85   1
12.8    18.05   1
13.1    18.4    1
13.3    18.6    1
13.55   18.85   1
13.8    19.05   1
14.15   19.25   1
14.45   19.5    1
14.85   19.55   1
15.0    19.7    1
15.25   19.7    1
15.55   19.85   1
15.95   19.9    1
16.2    19.9    1
16.55   19.9    1
16.85   19.9    1
17.2    19.9    1
17.4    19.8    1
17.65   19.75   1
17.8    19.7    1
18.0    19.6    1
18.2    19.55   1
3.9     9.6     2
3.55    10.65   2
3.35    11.4    2
3.1     12.35   2
3.1     13.25   2
3.05    14.15   2
3.0     15.1    2
3.1     16.0    2
3.2     16.85   2
3.45    17.75   2
3.7     18.7    2
3.95    19.55   2
4.35    20.25   2
4.7     21.1    2
5.15    21.8    2
5.6     22.5    2
6.2     23.3    2
6.8     23.85   2
7.35    24.45   2
8.05    24.95   2
8.8     25.45   2
9.5     26.0    2
10.2    26.35   2
10.9    26.75   2
11.7    27.0    2
12.45   27.25   2
13.3    27.6    2
14.05   27.6    2
14.7    27.75   2
15.55   27.75   2
16.4    27.75   2
17.1    27.75   2
17.9    27.75   2
18.55   27.7    2
19.35   27.6    2
20.1    27.35   2
20.7    27.1    2
21.45   26.8    2
22.05   26.5    2
22.7    26.15   2
23.35   25.65   2
23.8    25.3    2
24.3    24.85   2
24.75   24.35   2
25.25   23.95   2
25.65   23.45   2
26.05   23.0    2
26.2    22.3    2
26.6    21.8    2
26.75   21.25   2
27.0    20.7    2
27.15   20.15   2
27.15   19.6    2
27.35   19.1    2
27.35   18.45   2
27.4    18.0    2
27.3    17.4    2
27.15   16.9    2
27.0    16.4    2
27.0    15.9    2
26.75   15.35   2
26.55   14.85   2
26.3    14.45   2
25.95   14.1    2
25.75   13.7    2
25.35   13.3    2
25.05   12.95   2
24.8    12.7    2
24.4    12.45   2
24.05   12.2    2
23.55   11.85   2
23.2    11.65   2
22.75   11.4    2
22.3    11.3    2
21.9    11.1    2
21.45   11.05   2
21.1    11.0    2
20.7    10.95   2
20.35   10.95   2
19.95   11.0    2
19.55   11.0    2
19.15   11.05   2
18.85   11.1    2
18.45   11.25   2
18.15   11.35   2
17.85   11.5    2
17.5    11.7    2
17.2    11.95   2
17.0    12.05   2
16.75   12.2    2
16.65   12.35   2
16.5    12.5    2
16.35   12.7    2
16.2    12.8    2
16.15   12.95   2
16.0    13.1    2
15.95   13.25   2
15.9    13.4    2
15.8    13.5    2
15.8    13.65   2
15.75   13.85   2
15.65   14.05   2
15.65   14.25   2
15.65   14.5    2
15.65   14.6    2
"""


def load_dataset():
    """
    Load the provided dataset from the multiline string.

    Each row has three columns (x, y, and an unused label).
    Returns the x and y coordinates as (n_samples, 2).
    """
    lines = DATA_STR.strip().splitlines()
    data_list = []
    for line in lines:
        parts = line.split()
        if len(parts) >= 2:
            x = float(parts[0])
            y = float(parts[1])
            data_list.append([x, y])
    return np.array(data_list)


@pytest.fixture
def dataset():
    """Load the dataset."""
    return load_dataset()


def test_density_peak_clusterer(dataset):
    """Test the DensityPeakClusterer with the provided dataset."""
    clusterer = DensityPeakClusterer(
        gauss_cutoff=True,
        cutoff_distance="auto",
        distance_metric="euclidean",
        density_threshold=8,
        distance_threshold=5,
        anormal=False,
    )

    clusterer.fit(dataset)

    print("Cluster Labels:")  # noqa
    print(clusterer.labels_)  # noqa
    print("\nCluster Centers:")  # noqa
    print(clusterer.cluster_centers)  # noqa

    assert clusterer.labels_ is not None, "Cluster labels should not be None"
    assert len(clusterer.labels_) == len(
        dataset
    ), "Number of labels should match number of data points"
    assert clusterer.cluster_centers is not None, "Cluster centers should not be None"
    assert (
        len(clusterer.cluster_centers) > 0
    ), "There should be at least one cluster center"

    clusterer.plot(mode="all", title="Density Peak Clustering")


# use pytest -s
