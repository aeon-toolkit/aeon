import pytest
import responses
from unittest import mock
from build_tools import generate_developer_tables as gdt

@responses.activate
def test_get():
    responses.add(responses.GET, 'http://test.com', status=200)
    assert gdt.get('http://test.com', ('user', 'token')).status_code == 200

    responses.replace(responses.GET, 'http://test.com', status=429)
    with pytest.raises(requests.exceptions.HTTPError):
        gdt.get('http://test.com', ('user', 'token'))

@mock.patch('build_tools.generate_developer_tables.get')
def test_get_contributors(mock_get):
    mock_get.return_value.json.return_value = [{'login': 'test'}]
    assert gdt.get_contributors(('user', 'token')) == ([{'name': 'test', 'avatar_url': gdt.LOGO_URL, 'html_url': ''}],) * 6

@mock.patch('build_tools.generate_developer_tables.get')
def test_get_profile(mock_get):
    mock_get.return_value.json.return_value = {'name': None, 'login': 'test'}
    assert gdt.get_profile('test', ('user', 'token')) == {'name': 'test', 'avatar_url': gdt.LOGO_URL, 'html_url': ''}

def test_key():
    assert gdt.key({'name': 'First Last'}) == 'last first'

def test_generate_table():
    contributors = [{'name': 'Test User', 'avatar_url': 'http://test.com/avatar', 'html_url': 'http://test.com/user'}]
    expected_table = ".. raw :: html\n    <!-- Generated by generate_developer_table.py -->    <div class="aeon-teams-container">    <div>    <a href='http://test.com/user'><img src='http://test.com/avatar' class='avatar' /></a> <br />    <p><a href='http://test.com/user'>Test User</a></p>    </div>    </div>\n"
    assert gdt.generate_table(contributors) == expected_table

@mock.patch('builtins.open', new_callable=mock.mock_open)
@mock.patch('build_tools.generate_developer_tables.get_contributors')
def test_main(mock_get_contributors, mock_open):
    mock_get_contributors.return_value = ([{'name': 'Test User', 'avatar_url': 'http://test.com/avatar', 'html_url': 'http://test.com/user'}],) * 6
    gdt.main()
    assert mock_open.call_count == 6
